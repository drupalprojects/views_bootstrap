<?php

/**
 * @file
 * Custom functions for Views Bootstrap.
 */

use Drupal\views\Views;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function views_bootstrap_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.views_bootstrap':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The <a href="https://www.drupal.org/project/views_bootstrap">Views Bootstrap module</a> adds styles to Views to output the results of a view as several common <a href="http://getbootstrap.com/components/">Twitter Bootstrap</a> components.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('<a href="http://moduledev.dev/admin/structure/views/add">Create a view</a> using one of the following styles:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('<a href="http://getbootstrap.com/css/#grid-example-basic">Grid</a>') . '</li>';
      $output .= '<li>' . t('<a href="http://getbootstrap.com/css/#tables">Tables</a>') . '</li>';
      $output .= '<li>' . t('<a href="http://getbootstrap.com/components/#media">Media object</a>') . '</li>';
      $output .= '<li>' . t('<a href="http://getbootstrap.com/javascript/#collapse-example-accordion">Accordion</a>') . '</li>';
      $output .= '<li>' . t('<a href="http://getbootstrap.com/javascript/#carousel">Carousel</a>') . '</li>';
      $output .= '<li>' . t('<a href="http://getbootstrap.com/components/#list-group">List group</a>') . '</li>';
      $output .= '<ul>';

      return $output;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function views_bootstrap_theme_registry_alter(&$theme_registry) {
  $plugins = Views::getPluginDefinitions();
  $path = \Drupal::moduleHandler()->getModule('views_bootstrap')->getPath();

  foreach ($plugins['style'] as $style) {
    if ($style['provider'] == 'views_bootstrap') {
      $theme = $style['theme'];

      switch ($theme) {
        case 'views_bootstrap_grid':
          $theme_registry[$theme]['preprocess functions'][] = 'template_preprocess_views_view_grid';
          insert_preprocess_function_after($theme_registry, $theme, 'template_preprocess', 'template_preprocess_views_view_grid');
          break;

        case 'views_bootstrap_table':
          $theme_registry[$theme]['preprocess functions'][] = 'template_preprocess_views_view_table';
          insert_preprocess_function_after($theme_registry, $theme, 'template_preprocess', 'template_preprocess_views_view_table');
          break;

        case 'views_bootstrap_accordion':
          $theme_registry[$theme]['preprocess functions'][] = 'template_preprocess_views_view_accordion';
          insert_preprocess_function_after($theme_registry, $theme, 'template_preprocess', 'template_preprocess_views_view_accordion');
          break;

        case 'views_bootstrap_carousel':
          $theme_registry[$theme]['preprocess functions'][] = 'template_preprocess_views_view_carousel';
          insert_preprocess_function_after($theme_registry, $theme, 'template_preprocess', 'template_preprocess_views_view_carousel');
          break;

        case 'views_bootstrap_media_object':
          $theme_registry[$theme]['preprocess functions'][] = 'template_preprocess_views_view_media_object';
          break;

        case 'views_bootstrap_list_group':
          $theme_registry[$theme]['preprocess functions'][] = 'template_preprocess_views_view_list_group';
          break;
      }
      $theme_registry[$theme]['path'] = $path . '/templates/' . $theme;
      $theme_registry[$theme]['includes'][] = $theme_registry[$theme]['path'] . '/theme.inc';
      insert_preprocess_function_after($theme_registry, $theme, 'template_preprocess', 'template_preprocess_'.$theme);
    }
  }
}

/**
 * Insert new preprocess function into theme registry after existing hooks
 * who start by $hook_search
 *
 * @param $theme_registry
 * @param $theme
 * @param $hook_search
 * @param $new_hook
 */
function insert_preprocess_function_after(&$theme_registry, $theme, $hook_search, $new_hook) {
    $registry = &$theme_registry[$theme]['preprocess functions'];

    $new_array = array();
    $is_found = false;
    foreach ($registry as $key => $preprocess_name) {
        if(preg_match("#^".$hook_search."#", $preprocess_name)) {
            array_push($new_array, $preprocess_name);
            $is_found = true;
          } else {
            if ($is_found) {
                array_push($new_array, $new_hook);
                $is_found = false;
              } else {
                array_push($new_array, $preprocess_name);
              }
     }
   }

  $registry = $new_array;
}